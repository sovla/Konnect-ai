generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id            String        @id @default(cuid())
  name          String        @default("empty")
  email         String        @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  password      String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  riderProfile  RiderProfile?
  sessions      Session[]

  @@map("users")
}

model RiderProfile {
  id              String      @id @default(cuid())
  userId          String      @unique
  dailyGoal       Int         @default(80000)
  monthlyGoal     Int         @default(2400000)
  joinDate        DateTime    @default(now())
  totalDeliveries Int         @default(0)
  averageRating   Float       @default(0.0)
  acceptanceRate  Float       @default(0.0)
  avgDeliveryTime Int         @default(0)
  preferredAreas  String[]
  vehicleType     VehicleType @default(MOTORCYCLE)
  isOnline        Boolean     @default(false)
  onlineTime      Int         @default(0)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  deliveries      Delivery[]
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("rider_profiles")
}

model Delivery {
  id             String       @id @default(cuid())
  riderId        String
  date           DateTime
  completedAt    DateTime
  pickupAddress  String
  pickupLat      Float
  pickupLng      Float
  dropoffAddress String
  dropoffLat     Float
  dropoffLng     Float
  baseEarnings   Int
  promoEarnings  Int          @default(0)
  tipEarnings    Int          @default(0)
  totalEarnings  Int
  rating         Float
  deliveryTime   Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  riderProfile   RiderProfile @relation(fields: [riderId], references: [id], onDelete: Cascade)

  @@map("deliveries")
}

model Announcement {
  id        String           @id @default(cuid())
  title     String
  content   String
  type      AnnouncementType
  priority  Priority         @default(MEDIUM)
  startDate DateTime
  endDate   DateTime
  isActive  Boolean          @default(true)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("announcements")
}

model AIZone {
  id              String             @id @default(cuid())
  name            String
  coordinates     Json
  expectedCalls   Int
  avgFee          Int
  confidence      Float
  isActive        Boolean            @default(true)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  recommendations AIRecommendation[]
  predictions     AIZonePrediction[]

  @@map("ai_zones")
}

model AIZonePrediction {
  id             String   @id @default(cuid())
  zoneId         String
  hour           Int
  expectedCalls  Int
  confidence     Float
  predictionDate DateTime @default(now())
  zone           AIZone   @relation(fields: [zoneId], references: [id], onDelete: Cascade)

  @@unique([zoneId, hour, predictionDate])
  @@map("ai_zone_predictions")
}

model HeatmapPoint {
  id           String   @id @default(cuid())
  lat          Float
  lng          Float
  weight       Float
  recentOrders Int      @default(0)
  avgWaitTime  Int      @default(0)
  hourlyTrend  String   @default("stable")
  timestamp    DateTime @default(now())

  @@map("heatmap_points")
}

model AIRecommendation {
  id          String             @id @default(cuid())
  zoneId      String
  type        RecommendationType
  title       String
  description String
  impact      Impact             @default(MEDIUM)
  confidence  Float
  createdAt   DateTime           @default(now())
  zone        AIZone             @relation(fields: [zoneId], references: [id], onDelete: Cascade)

  @@map("ai_recommendations")
}

model PlatformStats {
  id                  String   @id @default(cuid())
  date                DateTime @unique
  avgAcceptanceRate   Float
  avgDeliveryTime     Int
  avgDailyEarnings    Int
  avgMonthlyEarnings  Int
  avgRating           Float
  avgDeliveriesPerDay Int
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("platform_stats")
}

enum VehicleType {
  MOTORCYCLE
  BICYCLE
  CAR

  @@map("vehicle_type")
}

enum AnnouncementType {
  PROMOTION
  NOTICE
  INCENTIVE

  @@map("announcement_type")
}

enum Priority {
  HIGH
  MEDIUM
  LOW

  @@map("priority")
}

enum RecommendationType {
  HISTORICAL_DATA
  EVENT
  WEATHER
  TIME_PATTERN
  RESTAURANT_DENSITY

  @@map("recommendation_type")
}

enum Impact {
  HIGH
  MEDIUM
  LOW

  @@map("impact")
}
